name: Deployment - Reusable Workflow
on: 
    workflow_call:

      inputs: 
        mongodb-uri: 
              required: true
              type: string
        k8s-manifest-dir: 
          description: Dir containing k8s manifest files
          default: kubernetes/
          required: true
          type: string
        environment: 
          description: Provide the deployment environment 
          default: dev
          required: true
          type: string
      
      outputs:
        application_url: 
          value: ${{ jobs.reuse-deploy.outputs.APP_INGRESS_URL }} 

      secrets:
          aws-access-key: 
              required: true
          aws-secret-access-key: 
              required: true
          mongodb-secret: 
              required: true

jobs:
    reuse-deploy: 
        environment: 
          name: ${{ inputs.environment }}
          url: ${{ steps.set-ingress-host.outputs.APP_INGRESS_HOST }} 
        outputs: 
          APP_INGRESS_URL: ${{ steps.set-ingress-host.outputs.APP_INGRESS_HOST }}
        runs-on: ubuntu-latest
        steps:

          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Install Kubectl CLI
            uses: azure/setup-kubectl@v4
            
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v3
            with:
                aws-access-key-id: ${{ secrets.aws-access-key }}
                aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
                aws-region: us-east-1 

          - name: Fetch k8s Cluster Details
            run: | 
                aws eks update-kubeconfig --region us-east-1 --name my-cluster
                kubectl get nodes

          - name: Ingress  
            if: inputs.environment == 'production'
            run: | 
                echo "Install Ingress..."
                if ! helm status nginx-ingress -n ingress-nginx &>/dev/null; then
                   helm install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace
                else
                  echo "NGINX Ingress already installed, skipping installation."
                fi
                echo -----------------------------------
                echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
                echo -----------------------------------
                echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV
                
          - name: Replace Token in Manifest Files
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '${'
              tokenSuffix: '}'
              files: '["${{ inputs.k8s-manifest-dir }}*.yaml"]'
            env:
              NAMESPACE:  ${{ vars.NAMESPACE }}
              REPLICAS:   ${{ vars.REPLICAS }}
              K8S_IMAGE:  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              INGRESS_IP: ${{ env.INGRESS_IP }} 
            
          - name: Check files
            run: | 
              cat ${{ inputs.k8s-manifest-dir }}*.yaml
            
          - name: Create MongoDB Secret
            run: |
              kubectl create ns ${{ vars.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
              kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
                --from-literal=MONGO_URI=${{ inputs.mongodb-uri }} \
                --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.mongodb-secret }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -
                
          - name: Deploy to Dev Env
            if: inputs.environment == 'production'
            run: |
              kubectl apply -f ${{ inputs.k8s-manifest-dir }}
                
          - name: Set App Ingress Host
            id: set-ingress-host
            run: | 
              echo "APP_INGRESS_HOST=$(kubectl get ingress -n development -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')"
              echo "----------------------------------------------"
              echo "APP_INGRESS_HOST=$(kubectl get ingress -n development -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')" >> $GITHUB_OUTPUT
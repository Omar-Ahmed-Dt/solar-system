name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/*

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    # use non production db to test
    services: 
      mongo-db: 
        image: siddharth67/mongo-db:non-prod 
        ports: 
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user 
      MONGO_PASSWORD: non-prod-password 

    strategy: 
      matrix: 
        nodejs_version: [18, 20]
        os: [ubuntu-latest]
        exclude: 
          - nodejs_version: 18
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm 
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        id: unit-testing-step
        run: npm test

      - name: Archive Test Results
        if: failure() && (steps.unit-testing-step.outcome == 'failure' || steps.unit-testing-step.outcome == 'success' )
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.os }}
          path: test-results.xml

  code-coverage: 
    name: Code Coverage
    runs-on: ubuntu-latest

    container: 
      image: node:18

    services: 
      mongo-db: 
        image: siddharth67/mongo-db:non-prod 
        options: 
          --name mongo  # label name as mongo to refer to it using this name
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user 
      MONGO_PASSWORD: non-prod-password 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      ## not need to this step if we use the job container
      # - name: Setup Node.js Version - 18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18 

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm 
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: check code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result 
          path: coverage  
          retention-days: 5
  
  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions: 
      packages: write # Grant the GitHub token the necessary permissions (write access to packages) to push the new image to the GitHub Container Registry (GHCR). 
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub   # By default, this action logs in to Docker Hub if no registry is specified.
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Container Registry  # specify ghcr to login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io 
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}   # this token is automatically generated, don't need to create it. by default, its permission is read only

      - name: Docker Build For Testing 
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing  # test img before push it
        run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
        
            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live
         
      - name: Container Registry Push  # By default, it pushes the image to Docker Hub if no registry is specified. 
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |     # push the new img to multi registries: docker hub and ghcr 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/omar-ahmed-dt/solar-system:${{github.sha}}
  dev-deploy: 
    needs: docker
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Kubectl CLI
        uses: azure/setup-kubectl@v4
      
      - name: Set KubeConfig file
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      # - name: Set KubeConfig file 
      #   uses: azure/k8s-set-context@v4
      #   with:
      #     method: kubeconfig
      #     kubeconfig: ${{ secrets.KUBECONFIG }}


      - name: Fetch k8s Cluster Details
        run: | 
            kubectl version
            echo -----------------------------------
            kubectl get nodes
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc my-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc my-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV
      
      - name: Replace Token in Manifest Files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["kubernetes/development"]'
        env:
          NAMESPACE:  ${{ vars.NAMESPACE }}
          REPLICAS:   ${{ vars.REPLICAS }}
          K8S_IMAGE:  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }} 
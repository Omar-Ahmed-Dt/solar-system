name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/*

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  region: "us-east-1" 

jobs:
  unit-testing:
    name: Unit Testing
    # use non production db to test
    services: 
      mongo-db: 
        image: siddharth67/mongo-db:non-prod 
        ports: 
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user 
      MONGO_PASSWORD: non-prod-password 

    # strategy: 
    #   matrix: 
    #     nodejs_version: [18, 20]
    #     os: [ubuntu-latest]
    #     exclude: 
    #       - nodejs_version: 18
    #         os: macos-latest
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup Node.js Version - ${{ matrix.nodejs_version }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ matrix.nodejs_version }}

      - name: Setup Node.js Version 
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm 
          # key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        id: unit-testing-step
        run: npm test

      - name: Archive Test Results
        # if: failure() && (steps.unit-testing-step.outcome == 'failure' || steps.unit-testing-step.outcome == 'success' )
        uses: actions/upload-artifact@v4
        with:
          # name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.os }}
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage: 
    name: Code Coverage
    runs-on: ubuntu-latest

    container: 
      image: node:18

    services: 
      mongo-db: 
        image: siddharth67/mongo-db:non-prod 
        options: 
          --name mongo  # label name as mongo to refer to it using this name
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user 
      MONGO_PASSWORD: non-prod-password 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      ## not need to this step if we use the job container
      # - name: Setup Node.js Version - 18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18 

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm 
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: check code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result 
          path: coverage  
          retention-days: 5

  reports-s3: 
    name: AWS S3 Upload Reports
    needs: [code-coverage, unit-testing]
    runs-on: ubuntu-latest
    steps:

      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v4
        with: 
         name: Mocha-Test-Result

      - name: Download Code Coverage Artifact 
        uses: actions/download-artifact@v4
        with: 
         name: Code-Coverage-Result 

      - name: Merge Test Files
        run: |
          ls -ltr
          mkdir reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${{ github.sha }}/
          mv test-results.xml reports-${{ github.sha }}/
          ls -ltr reports-${{ github.sha }}/

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete 
        env:
          AWS_S3_BUCKET: solar-system-reports-bucket-9289
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.region }} 
          SOURCE_DIR: 'reports-${{ github.sha }}' 
          DEST_DIR: 'reports-${{ github.sha }}'
 
  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions: 
      packages: write # Grant the GitHub token the necessary permissions (write access to packages) to push the new image to the GitHub Container Registry (GHCR). 
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub   # By default, this action logs in to Docker Hub if no registry is specified.
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Container Registry  # specify ghcr to login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io 
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}   # this token is automatically generated, don't need to create it. by default, its permission is read only

      - name: Docker Build For Testing 
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing  # test img before push it
        run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
        
            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live
         
      - name: Container Registry Push  # By default, it pushes the image to Docker Hub if no registry is specified. 
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |     # push the new img to multi registries: docker hub and ghcr 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/omar-ahmed-dt/solar-system:${{github.sha}}

  dev-deploy: 
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets: 
      aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      mongodb-secret: ${{ secrets.MONGO_PASSWORD }} 
    with: 
      mongodb-uri: ${{ vars.MONGO_URI }}
      environment: development
      k8s-manifest-dir: kubernetes/development/

  dev-integration-testing:
        name: Dev Integration Testing
        if: contains(github.ref, 'feature/')
        needs: dev-deploy
        runs-on: ubuntu-latest
        permissions: 
          id-token: write
          contents: read
        steps:

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with: 
              # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
              role-to-assume: arn:aws:iam::590184071934:role/github_actions 
              role-session-name: GitHubActions
              aws-region: ${{ env.region }}

          - name: Test URL using CURL and JQ
            run: |
              aws eks update-kubeconfig --region us-east-1 --name my-cluster
              kubectl port-forward svc/solar-system -n development 3000:3000 &
              PORT_FORWARD_PID=$!
    
              # Wait briefly to ensure port-forward is established
              sleep 5
              echo "----------------------------------------------"
              curl http://localhost:3000/live -s -k | jq -r .status | grep -i live 
              # Cleanup
              kill $PORT_FORWARD_PID

  prod-deploy: 
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    secrets: 
      aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      mongodb-secret: ${{ secrets.MONGO_PASSWORD }} 
    with: 
      mongodb-uri: ${{ vars.MONGO_URI }}
      environment: production
      k8s-manifest-dir: kubernetes/production/

  prod-integration-testing:
    name: prod Integration Testing
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.application_url }}
        run: |
          echo $URL
          echo "----------------------------------------------"
          curl https://$URL/live -s -k | jq -r .status | grep -i live
  
  slack-notification:
    if: always()
    name: Slack Notification
    needs: [dev-integration-testing, prod-integration-testing ]
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: github-actions-channel
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff0eff'
          SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
          SLACK_MESSAGE: ':hammer_and_wrench: Triggered by ${{ github.actor }}'
          SLACK_TITLE: Information
